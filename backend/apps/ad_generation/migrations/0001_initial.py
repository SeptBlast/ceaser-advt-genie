# Generated by Django 4.2.23 on 2025-08-02 00:11

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Campaign",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("tenant", models.CharField(db_index=True, max_length=100)),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True)),
                (
                    "target_audience",
                    models.TextField(help_text="Description of target audience"),
                ),
                ("brand_guidelines", models.JSONField(blank=True, default=dict)),
                ("campaign_objectives", models.JSONField(blank=True, default=list)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("active", "Active"),
                            ("paused", "Paused"),
                            ("completed", "Completed"),
                            ("archived", "Archived"),
                        ],
                        default="draft",
                        max_length=20,
                    ),
                ),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("ended_at", models.DateTimeField(blank=True, null=True)),
                (
                    "total_budget",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "spent_budget",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=12,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="campaigns",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "ad_campaigns",
            },
        ),
        migrations.CreateModel(
            name="Creative",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("tenant", models.CharField(db_index=True, max_length=100)),
                ("name", models.CharField(max_length=255)),
                (
                    "creative_type",
                    models.CharField(
                        choices=[
                            ("text", "Text Ad"),
                            ("image", "Image Ad"),
                            ("video", "Video Ad"),
                            ("audio", "Audio Ad"),
                            ("banner", "Banner Ad"),
                            ("social", "Social Media Post"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "creative_format",
                    models.CharField(
                        choices=[
                            ("square", "Square (1:1)"),
                            ("landscape", "Landscape (16:9)"),
                            ("portrait", "Portrait (9:16)"),
                            ("story", "Story (9:16)"),
                            ("banner", "Banner (728x90)"),
                            ("leaderboard", "Leaderboard (728x90)"),
                            ("skyscraper", "Skyscraper (160x600)"),
                            ("custom", "Custom Dimensions"),
                        ],
                        max_length=20,
                    ),
                ),
                ("original_prompt", models.TextField(help_text="Original user prompt")),
                (
                    "engineered_prompt",
                    models.TextField(blank=True, help_text="AI-engineered prompt"),
                ),
                ("model_used", models.CharField(blank=True, max_length=100)),
                ("generation_time", models.DurationField(blank=True, null=True)),
                (
                    "content",
                    models.TextField(blank=True, help_text="Generated text content"),
                ),
                (
                    "content_url",
                    models.URLField(
                        blank=True, help_text="URL to generated media content"
                    ),
                ),
                (
                    "quality_score",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                ("performance_metrics", models.JSONField(blank=True, default=dict)),
                ("generation_parameters", models.JSONField(blank=True, default=dict)),
                (
                    "brand_compliance_score",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("generated", "Generated"),
                            ("reviewed", "Reviewed"),
                            ("approved", "Approved"),
                            ("active", "Active"),
                            ("paused", "Paused"),
                            ("rejected", "Rejected"),
                        ],
                        default="draft",
                        max_length=20,
                    ),
                ),
                ("published_at", models.DateTimeField(blank=True, null=True)),
                (
                    "campaign",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="creatives",
                        to="ad_generation.campaign",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="creatives",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "ad_creatives",
            },
        ),
        migrations.CreateModel(
            name="GenerationJob",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("tenant", models.CharField(db_index=True, max_length=100)),
                (
                    "job_type",
                    models.CharField(
                        choices=[
                            ("single_creative", "Single Creative Generation"),
                            ("batch_creative_generation", "Batch Creative Generation"),
                            ("campaign_optimization", "Campaign Optimization"),
                            ("creative_variations", "Creative Variations"),
                        ],
                        max_length=50,
                    ),
                ),
                ("parameters", models.JSONField(default=dict)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("queued", "Queued"),
                            ("running", "Running"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="queued",
                        max_length=20,
                    ),
                ),
                (
                    "progress",
                    models.IntegerField(
                        default=0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                ("total_items", models.PositiveIntegerField(default=0)),
                ("completed_items", models.PositiveIntegerField(default=0)),
                ("results", models.JSONField(blank=True, default=dict)),
                ("error_message", models.TextField(blank=True)),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "campaign",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="generation_jobs",
                        to="ad_generation.campaign",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="generation_jobs",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "ad_generation_jobs",
                "indexes": [
                    models.Index(
                        fields=["tenant", "status"],
                        name="ad_generati_tenant_3b8ec0_idx",
                    ),
                    models.Index(
                        fields=["tenant", "user"], name="ad_generati_tenant_1a468d_idx"
                    ),
                    models.Index(
                        fields=["created_at"], name="ad_generati_created_e5709b_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="CreativeVariation",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("tenant", models.CharField(db_index=True, max_length=100)),
                ("variation_name", models.CharField(max_length=255)),
                ("variation_prompt", models.TextField(blank=True)),
                ("variation_parameters", models.JSONField(blank=True, default=dict)),
                ("content", models.TextField(blank=True)),
                ("content_url", models.URLField(blank=True)),
                ("performance_metrics", models.JSONField(blank=True, default=dict)),
                (
                    "quality_score",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                ("test_group", models.CharField(blank=True, max_length=50)),
                (
                    "confidence_score",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "parent_creative",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="variations",
                        to="ad_generation.creative",
                    ),
                ),
            ],
            options={
                "db_table": "ad_creative_variations",
                "indexes": [
                    models.Index(
                        fields=["parent_creative"],
                        name="ad_creative_parent__11a6f5_idx",
                    ),
                    models.Index(
                        fields=["test_group"], name="ad_creative_test_gr_5adf84_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="CreativeTemplate",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("tenant", models.CharField(db_index=True, max_length=100)),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField()),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("ecommerce", "E-commerce"),
                            ("saas", "SaaS"),
                            ("retail", "Retail"),
                            ("finance", "Finance"),
                            ("healthcare", "Healthcare"),
                            ("education", "Education"),
                            ("entertainment", "Entertainment"),
                            ("travel", "Travel"),
                            ("food", "Food & Beverage"),
                            ("automotive", "Automotive"),
                            ("real_estate", "Real Estate"),
                            ("nonprofit", "Non-profit"),
                            ("general", "General"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "creative_type",
                    models.CharField(
                        choices=[
                            ("text", "Text Ad"),
                            ("image", "Image Ad"),
                            ("video", "Video Ad"),
                            ("audio", "Audio Ad"),
                            ("banner", "Banner Ad"),
                            ("social", "Social Media Post"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "creative_format",
                    models.CharField(
                        choices=[
                            ("square", "Square (1:1)"),
                            ("landscape", "Landscape (16:9)"),
                            ("portrait", "Portrait (9:16)"),
                            ("story", "Story (9:16)"),
                            ("banner", "Banner (728x90)"),
                            ("leaderboard", "Leaderboard (728x90)"),
                            ("skyscraper", "Skyscraper (160x600)"),
                            ("custom", "Custom Dimensions"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "prompt_template",
                    models.TextField(
                        help_text="Template with placeholders like {brand}, {product}"
                    ),
                ),
                ("default_parameters", models.JSONField(blank=True, default=dict)),
                ("is_public", models.BooleanField(default=False)),
                ("usage_count", models.PositiveIntegerField(default=0)),
                (
                    "average_quality_score",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "success_rate",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="creative_templates",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "ad_creative_templates",
                "indexes": [
                    models.Index(
                        fields=["category", "creative_type"],
                        name="ad_creative_categor_5496fe_idx",
                    ),
                    models.Index(
                        fields=["is_public"], name="ad_creative_is_publ_afd348_idx"
                    ),
                    models.Index(
                        fields=["tenant", "user"], name="ad_creative_tenant_812b07_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="CreativeMetrics",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "metric_type",
                    models.CharField(
                        choices=[
                            ("impressions", "Impressions"),
                            ("clicks", "Clicks"),
                            ("conversions", "Conversions"),
                            ("ctr", "Click-through Rate"),
                            ("cpc", "Cost per Click"),
                            ("cpm", "Cost per Mille"),
                            ("cpa", "Cost per Acquisition"),
                            ("roas", "Return on Ad Spend"),
                            ("engagement", "Engagement"),
                            ("reach", "Reach"),
                            ("frequency", "Frequency"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "metric_source",
                    models.CharField(
                        choices=[
                            ("google_ads", "Google Ads"),
                            ("facebook_ads", "Facebook Ads"),
                            ("instagram_ads", "Instagram Ads"),
                            ("linkedin_ads", "LinkedIn Ads"),
                            ("twitter_ads", "Twitter Ads"),
                            ("tiktok_ads", "TikTok Ads"),
                            ("snapchat_ads", "Snapchat Ads"),
                            ("manual", "Manual Entry"),
                            ("internal", "Internal Tracking"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "value",
                    models.FloatField(help_text="Metric value (rate, cost, etc.)"),
                ),
                (
                    "count",
                    models.PositiveIntegerField(
                        default=0, help_text="Count-based metrics"
                    ),
                ),
                ("platform", models.CharField(blank=True, max_length=50)),
                ("placement", models.CharField(blank=True, max_length=100)),
                ("audience_segment", models.CharField(blank=True, max_length=100)),
                ("metadata", models.JSONField(blank=True, default=dict)),
                ("recorded_at", models.DateTimeField(auto_now_add=True)),
                (
                    "creative",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="metrics",
                        to="ad_generation.creative",
                    ),
                ),
            ],
            options={
                "db_table": "ad_creative_metrics",
                "indexes": [
                    models.Index(
                        fields=["creative", "metric_type"],
                        name="ad_creative_creativ_768847_idx",
                    ),
                    models.Index(
                        fields=["creative", "recorded_at"],
                        name="ad_creative_creativ_294bc9_idx",
                    ),
                    models.Index(
                        fields=["metric_source", "recorded_at"],
                        name="ad_creative_metric__c8cc45_idx",
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="creative",
            index=models.Index(
                fields=["tenant", "campaign"], name="ad_creative_tenant_7dcd82_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="creative",
            index=models.Index(
                fields=["tenant", "creative_type"], name="ad_creative_tenant_a7a581_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="creative",
            index=models.Index(
                fields=["tenant", "status"], name="ad_creative_tenant_943286_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="creative",
            index=models.Index(
                fields=["created_at"], name="ad_creative_created_53b88a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="campaign",
            index=models.Index(
                fields=["tenant", "status"], name="ad_campaign_tenant_219dcc_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="campaign",
            index=models.Index(
                fields=["tenant", "user"], name="ad_campaign_tenant_42f67e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="campaign",
            index=models.Index(
                fields=["created_at"], name="ad_campaign_created_57aead_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="campaign",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("spent_budget__lte", models.F("total_budget")),
                    ("total_budget__isnull", True),
                    _connector="OR",
                ),
                name="spent_budget_not_exceeding_total",
            ),
        ),
    ]
