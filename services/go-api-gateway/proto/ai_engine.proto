syntax = "proto3";

package ai_engine;

option go_package = "github.com/startupmanch/ceaser-ad-business/proto/ai_engine";

// Service definition for AI Engine
service AIEngine {
  rpc GenerateCreative(CreativeRequest) returns (CreativeResponse);
  rpc GenerateTextCreative(TextGenerationRequest) returns (TextGenerationResponse);
  rpc GenerateImageCreative(ImageGenerationRequest) returns (ImageGenerationResponse);
  rpc GenerateVideoCreative(VideoGenerationRequest) returns (VideoGenerationResponse);
  rpc AnalyzeContent(AnalysisRequest) returns (AnalysisResponse);
  rpc GenerateInsights(InsightsRequest) returns (InsightsResponse);
  rpc RunAgent(AgentRequest) returns (AgentResponse);
}

// Message types for creative generation
message GenerateCreativeRequest {
  string campaign_id = 1;
  string creative_type = 2; // "image", "video", "text", "carousel"
  map<string, string> parameters = 3;
  repeated string platforms = 4;
  TargetAudience target_audience = 5;
  BrandGuidelines brand_guidelines = 6;
}

message GenerateCreativeResponse {
  bool success = 1;
  string message = 2;
  repeated CreativeVariation variations = 3;
  GenerationMetadata metadata = 4;
}

// Message types for campaign analysis
message AnalyzeCampaignRequest {
  string campaign_id = 1;
  repeated string metrics = 2;
  string analysis_type = 3;
  map<string, string> filters = 4;
}

message AnalyzeCampaignResponse {
  bool success = 1;
  string message = 2;
  AnalysisResult analysis = 3;
  repeated Recommendation recommendations = 4;
}

// Message types for agent workflows
message AgentWorkflowRequest {
  string workflow_type = 1;
  string user_query = 2;
  map<string, string> context = 3;
  repeated string available_tools = 4;
  string campaign_id = 5;
}

message AgentWorkflowResponse {
  bool success = 1;
  string message = 2;
  string result = 3;
  repeated ToolUsage tools_used = 4;
  WorkflowMetadata metadata = 5;
}

// Message types for insights
message InsightsRequest {
  string campaign_id = 1;
  string insight_type = 2;
  string time_range = 3;
  map<string, string> parameters = 4;
}

message InsightsResponse {
  bool success = 1;
  string message = 2;
  repeated Insight insights = 3;
  string summary = 4;
}

// Shared data structures
message TargetAudience {
  map<string, string> demographics = 1;
  repeated string interests = 2;
  repeated string behaviors = 3;
  map<string, string> custom_attributes = 4;
}

message BrandGuidelines {
  repeated string colors = 1;
  repeated string fonts = 2;
  string voice_tone = 3;
  map<string, string> style_preferences = 4;
  repeated string brand_assets = 5;
}

message CreativeVariation {
  string variation_id = 1;
  string content_url = 2;
  string content_type = 3;
  map<string, string> generation_parameters = 4;
  float performance_score = 5;
  bool is_approved = 6;
  string created_at = 7;
}

message GenerationMetadata {
  string model_used = 1;
  map<string, string> parameters = 2;
  float generation_time_seconds = 3;
  string timestamp = 4;
}

message AnalysisResult {
  string analysis_id = 1;
  map<string, float> metrics = 2;
  string summary = 3;
  repeated string insights = 4;
  string confidence_score = 5;
}

message Recommendation {
  string recommendation_id = 1;
  string title = 2;
  string description = 3;
  string priority = 4;
  float impact_score = 5;
  repeated string action_items = 6;
}

message ToolUsage {
  string tool_name = 1;
  string input = 2;
  string output = 3;
  float execution_time_seconds = 4;
  bool success = 5;
}

message WorkflowMetadata {
  string workflow_id = 1;
  int32 steps_executed = 2;
  float total_time_seconds = 3;
  string timestamp = 4;
}

message Insight {
  string insight_id = 1;
  string title = 2;
  string description = 3;
  string category = 4;
  float confidence_score = 5;
  map<string, string> data_points = 6;
}

// Ad Generation specific messages
message CreativeRequest {
  string prompt = 1;
  string type = 2; // text, image, video
  map<string, string> metadata = 3;
}

message CreativeResponse {
  string content = 1;
  string type = 2;
  string model_used = 3;
  map<string, string> metadata = 4;
}

// Text creative generation
message TextGenerationRequest {
  string prompt = 1;
  string brand_guidelines = 2;
  string target_audience = 3;
  string style = 4;
  int32 max_length = 5;
  bool include_branding = 6;
  int32 variations = 7;
}

message TextGenerationResponse {
  string generated_text = 1;
  string headline = 2;
  string model_used = 3;
  repeated string variations = 4;
}

// Image creative generation  
message ImageGenerationRequest {
  string prompt = 1;
  string style = 2;
  string aspect_ratio = 3;
  repeated string brand_assets = 4;
  bool include_branding = 5;
  string quality = 6;
}

message ImageGenerationResponse {
  string image_url = 1;
  string aspect_ratio = 2;
  string enhanced_prompt = 3;
  string model_used = 4;
  map<string, string> metadata = 5;
}

// Video creative generation
message VideoGenerationRequest {
  string prompt = 1;
  string style = 2;
  int32 duration_seconds = 3;
  string aspect_ratio = 4;
  string quality = 5;
  bool include_branding = 6;
}

message VideoGenerationResponse {
  string video_url = 1;
  int32 duration_seconds = 2;
  string enhanced_prompt = 3;
  string model_used = 4;
  map<string, string> metadata = 5;
}

// Analysis messages
message AnalysisRequest {
  string content_id = 1;
  string analysis_type = 2;
  map<string, string> parameters = 3;
}

message AnalysisResponse {
  string analysis_result = 1;
  float confidence_score = 2;
  map<string, string> metrics = 3;
  repeated string insights = 4;
}

// Agent messages
message AgentRequest {
  string query = 1;
  string context = 2;
  repeated string tools = 3;
}

message AgentResponse {
  string response = 1;
  repeated string actions_taken = 2;
  string result = 3;
}
