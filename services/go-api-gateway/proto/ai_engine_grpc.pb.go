// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: ai_engine.proto

package ai_engine

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AIEngine_GenerateCreative_FullMethodName      = "/ai_engine.AIEngine/GenerateCreative"
	AIEngine_GenerateTextCreative_FullMethodName  = "/ai_engine.AIEngine/GenerateTextCreative"
	AIEngine_GenerateImageCreative_FullMethodName = "/ai_engine.AIEngine/GenerateImageCreative"
	AIEngine_GenerateVideoCreative_FullMethodName = "/ai_engine.AIEngine/GenerateVideoCreative"
	AIEngine_AnalyzeContent_FullMethodName        = "/ai_engine.AIEngine/AnalyzeContent"
	AIEngine_GenerateInsights_FullMethodName      = "/ai_engine.AIEngine/GenerateInsights"
	AIEngine_RunAgent_FullMethodName              = "/ai_engine.AIEngine/RunAgent"
)

// AIEngineClient is the client API for AIEngine service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definition for AI Engine
type AIEngineClient interface {
	GenerateCreative(ctx context.Context, in *CreativeRequest, opts ...grpc.CallOption) (*CreativeResponse, error)
	GenerateTextCreative(ctx context.Context, in *TextGenerationRequest, opts ...grpc.CallOption) (*TextGenerationResponse, error)
	GenerateImageCreative(ctx context.Context, in *ImageGenerationRequest, opts ...grpc.CallOption) (*ImageGenerationResponse, error)
	GenerateVideoCreative(ctx context.Context, in *VideoGenerationRequest, opts ...grpc.CallOption) (*VideoGenerationResponse, error)
	AnalyzeContent(ctx context.Context, in *AnalysisRequest, opts ...grpc.CallOption) (*AnalysisResponse, error)
	GenerateInsights(ctx context.Context, in *InsightsRequest, opts ...grpc.CallOption) (*InsightsResponse, error)
	RunAgent(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (*AgentResponse, error)
}

type aIEngineClient struct {
	cc grpc.ClientConnInterface
}

func NewAIEngineClient(cc grpc.ClientConnInterface) AIEngineClient {
	return &aIEngineClient{cc}
}

func (c *aIEngineClient) GenerateCreative(ctx context.Context, in *CreativeRequest, opts ...grpc.CallOption) (*CreativeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreativeResponse)
	err := c.cc.Invoke(ctx, AIEngine_GenerateCreative_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIEngineClient) GenerateTextCreative(ctx context.Context, in *TextGenerationRequest, opts ...grpc.CallOption) (*TextGenerationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TextGenerationResponse)
	err := c.cc.Invoke(ctx, AIEngine_GenerateTextCreative_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIEngineClient) GenerateImageCreative(ctx context.Context, in *ImageGenerationRequest, opts ...grpc.CallOption) (*ImageGenerationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImageGenerationResponse)
	err := c.cc.Invoke(ctx, AIEngine_GenerateImageCreative_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIEngineClient) GenerateVideoCreative(ctx context.Context, in *VideoGenerationRequest, opts ...grpc.CallOption) (*VideoGenerationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VideoGenerationResponse)
	err := c.cc.Invoke(ctx, AIEngine_GenerateVideoCreative_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIEngineClient) AnalyzeContent(ctx context.Context, in *AnalysisRequest, opts ...grpc.CallOption) (*AnalysisResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnalysisResponse)
	err := c.cc.Invoke(ctx, AIEngine_AnalyzeContent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIEngineClient) GenerateInsights(ctx context.Context, in *InsightsRequest, opts ...grpc.CallOption) (*InsightsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InsightsResponse)
	err := c.cc.Invoke(ctx, AIEngine_GenerateInsights_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIEngineClient) RunAgent(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (*AgentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgentResponse)
	err := c.cc.Invoke(ctx, AIEngine_RunAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AIEngineServer is the server API for AIEngine service.
// All implementations must embed UnimplementedAIEngineServer
// for forward compatibility.
//
// Service definition for AI Engine
type AIEngineServer interface {
	GenerateCreative(context.Context, *CreativeRequest) (*CreativeResponse, error)
	GenerateTextCreative(context.Context, *TextGenerationRequest) (*TextGenerationResponse, error)
	GenerateImageCreative(context.Context, *ImageGenerationRequest) (*ImageGenerationResponse, error)
	GenerateVideoCreative(context.Context, *VideoGenerationRequest) (*VideoGenerationResponse, error)
	AnalyzeContent(context.Context, *AnalysisRequest) (*AnalysisResponse, error)
	GenerateInsights(context.Context, *InsightsRequest) (*InsightsResponse, error)
	RunAgent(context.Context, *AgentRequest) (*AgentResponse, error)
	mustEmbedUnimplementedAIEngineServer()
}

// UnimplementedAIEngineServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAIEngineServer struct{}

func (UnimplementedAIEngineServer) GenerateCreative(context.Context, *CreativeRequest) (*CreativeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateCreative not implemented")
}
func (UnimplementedAIEngineServer) GenerateTextCreative(context.Context, *TextGenerationRequest) (*TextGenerationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateTextCreative not implemented")
}
func (UnimplementedAIEngineServer) GenerateImageCreative(context.Context, *ImageGenerationRequest) (*ImageGenerationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateImageCreative not implemented")
}
func (UnimplementedAIEngineServer) GenerateVideoCreative(context.Context, *VideoGenerationRequest) (*VideoGenerationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateVideoCreative not implemented")
}
func (UnimplementedAIEngineServer) AnalyzeContent(context.Context, *AnalysisRequest) (*AnalysisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalyzeContent not implemented")
}
func (UnimplementedAIEngineServer) GenerateInsights(context.Context, *InsightsRequest) (*InsightsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateInsights not implemented")
}
func (UnimplementedAIEngineServer) RunAgent(context.Context, *AgentRequest) (*AgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunAgent not implemented")
}
func (UnimplementedAIEngineServer) mustEmbedUnimplementedAIEngineServer() {}
func (UnimplementedAIEngineServer) testEmbeddedByValue()                  {}

// UnsafeAIEngineServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AIEngineServer will
// result in compilation errors.
type UnsafeAIEngineServer interface {
	mustEmbedUnimplementedAIEngineServer()
}

func RegisterAIEngineServer(s grpc.ServiceRegistrar, srv AIEngineServer) {
	// If the following call pancis, it indicates UnimplementedAIEngineServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AIEngine_ServiceDesc, srv)
}

func _AIEngine_GenerateCreative_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreativeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIEngineServer).GenerateCreative(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIEngine_GenerateCreative_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIEngineServer).GenerateCreative(ctx, req.(*CreativeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIEngine_GenerateTextCreative_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextGenerationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIEngineServer).GenerateTextCreative(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIEngine_GenerateTextCreative_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIEngineServer).GenerateTextCreative(ctx, req.(*TextGenerationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIEngine_GenerateImageCreative_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageGenerationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIEngineServer).GenerateImageCreative(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIEngine_GenerateImageCreative_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIEngineServer).GenerateImageCreative(ctx, req.(*ImageGenerationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIEngine_GenerateVideoCreative_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoGenerationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIEngineServer).GenerateVideoCreative(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIEngine_GenerateVideoCreative_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIEngineServer).GenerateVideoCreative(ctx, req.(*VideoGenerationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIEngine_AnalyzeContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalysisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIEngineServer).AnalyzeContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIEngine_AnalyzeContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIEngineServer).AnalyzeContent(ctx, req.(*AnalysisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIEngine_GenerateInsights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsightsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIEngineServer).GenerateInsights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIEngine_GenerateInsights_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIEngineServer).GenerateInsights(ctx, req.(*InsightsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIEngine_RunAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIEngineServer).RunAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIEngine_RunAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIEngineServer).RunAgent(ctx, req.(*AgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AIEngine_ServiceDesc is the grpc.ServiceDesc for AIEngine service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AIEngine_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ai_engine.AIEngine",
	HandlerType: (*AIEngineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateCreative",
			Handler:    _AIEngine_GenerateCreative_Handler,
		},
		{
			MethodName: "GenerateTextCreative",
			Handler:    _AIEngine_GenerateTextCreative_Handler,
		},
		{
			MethodName: "GenerateImageCreative",
			Handler:    _AIEngine_GenerateImageCreative_Handler,
		},
		{
			MethodName: "GenerateVideoCreative",
			Handler:    _AIEngine_GenerateVideoCreative_Handler,
		},
		{
			MethodName: "AnalyzeContent",
			Handler:    _AIEngine_AnalyzeContent_Handler,
		},
		{
			MethodName: "GenerateInsights",
			Handler:    _AIEngine_GenerateInsights_Handler,
		},
		{
			MethodName: "RunAgent",
			Handler:    _AIEngine_RunAgent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ai_engine.proto",
}
