{
    "info": {
        "name": "AdGenius Multi-Tenant SaaS API",
        "description": "Complete API collection for testing AdGenius multi-tenant advertising platform",
        "version": "1.0.0",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "auth": {
        "type": "bearer",
        "bearer": [
            {
                "key": "token",
                "value": "{{authToken}}",
                "type": "string"
            }
        ]
    },
    "event": [
        {
            "listen": "prerequest",
            "script": {
                "exec": [
                    "// Add tenant header to all requests",
                    "pm.request.headers.add({",
                    "    key: 'X-Tenant-ID',",
                    "    value: pm.environment.get('tenantId')",
                    "});",
                    "",
                    "// Add content type for POST/PUT requests",
                    "if (pm.request.method === 'POST' || pm.request.method === 'PUT') {",
                    "    pm.request.headers.add({",
                    "        key: 'Content-Type',",
                    "        value: 'application/json'",
                    "    });",
                    "}"
                ],
                "type": "text/javascript"
            }
        },
        {
            "listen": "test",
            "script": {
                "exec": [
                    "// Global test scripts",
                    "pm.test('Response time is less than 5000ms', function () {",
                    "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                    "});",
                    "",
                    "pm.test('Response has valid JSON', function () {",
                    "    pm.response.to.be.json;",
                    "});"
                ],
                "type": "text/javascript"
            }
        }
    ],
    "variable": [
        {
            "key": "baseUrl",
            "value": "http://localhost:8080",
            "type": "string"
        },
        {
            "key": "authToken",
            "value": "placeholder-token",
            "type": "string"
        },
        {
            "key": "tenantId",
            "value": "acme-corp",
            "type": "string"
        }
    ],
    "item": [
        {
            "name": "Health Check",
            "item": [
                {
                    "name": "Check Service Health",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 200', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test('Service is healthy', function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.status).to.eql('healthy');",
                                    "});",
                                    "",
                                    "pm.test('All services connected', function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.services.database).to.eql('connected');",
                                    "    pm.expect(jsonData.services.redis).to.eql('connected');",
                                    "    pm.expect(jsonData.services.ai_engine).to.eql('connected');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/health",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "health"
                            ]
                        }
                    }
                }
            ]
        },
        {
            "name": "Campaign Management",
            "item": [
                {
                    "name": "List Campaigns",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 200', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test('Response has campaigns array', function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('campaigns');",
                                    "    pm.expect(jsonData.campaigns).to.be.an('array');",
                                    "});",
                                    "",
                                    "pm.test('Response has pagination', function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('pagination');",
                                    "    pm.expect(jsonData.pagination).to.have.property('page');",
                                    "    pm.expect(jsonData.pagination).to.have.property('total');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/v1/ad-generation/campaigns?page=1&limit=10",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "v1",
                                "ad-generation",
                                "campaigns"
                            ],
                            "query": [
                                {
                                    "key": "page",
                                    "value": "1"
                                },
                                {
                                    "key": "limit",
                                    "value": "10"
                                }
                            ]
                        }
                    }
                },
                {
                    "name": "Create Campaign",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 201', function () {",
                                    "    pm.response.to.have.status(201);",
                                    "});",
                                    "",
                                    "pm.test('Campaign created successfully', function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('campaign');",
                                    "    pm.expect(jsonData.campaign).to.have.property('id');",
                                    "    ",
                                    "    // Store campaign ID for future requests",
                                    "    pm.environment.set('campaignId', jsonData.campaign.id);",
                                    "});",
                                    "",
                                    "pm.test('Campaign has correct properties', function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    const campaign = jsonData.campaign;",
                                    "    ",
                                    "    pm.expect(campaign).to.have.property('name');",
                                    "    pm.expect(campaign).to.have.property('budget');",
                                    "    pm.expect(campaign).to.have.property('status');",
                                    "    pm.expect(campaign.budget).to.be.a('number');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"name\": \"Test Campaign {{$timestamp}}\",\n  \"description\": \"Test campaign for API validation\",\n  \"budget\": 5000.00,\n  \"start_date\": \"2025-08-01T00:00:00Z\",\n  \"end_date\": \"2025-08-31T23:59:59Z\",\n  \"target_audience\": {\n    \"age_range\": \"25-45\",\n    \"interests\": [\"technology\", \"business\"],\n    \"demographics\": \"professionals\"\n  }\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/v1/ad-generation/campaigns",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "v1",
                                "ad-generation",
                                "campaigns"
                            ]
                        }
                    }
                },
                {
                    "name": "Get Campaign by ID",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 200', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test('Campaign retrieved successfully', function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('campaign');",
                                    "    pm.expect(jsonData.campaign.id).to.eql(pm.environment.get('campaignId'));",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/v1/ad-generation/campaigns/{{campaignId}}",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "v1",
                                "ad-generation",
                                "campaigns",
                                "{{campaignId}}"
                            ]
                        }
                    }
                },
                {
                    "name": "Update Campaign",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 200', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test('Campaign updated successfully', function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('campaign');",
                                    "    pm.expect(jsonData.campaign.budget).to.eql(7500);",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "PUT",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"budget\": 7500.00,\n  \"status\": \"active\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/v1/ad-generation/campaigns/{{campaignId}}",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "v1",
                                "ad-generation",
                                "campaigns",
                                "{{campaignId}}"
                            ]
                        }
                    }
                }
            ]
        },
        {
            "name": "Creative Management",
            "item": [
                {
                    "name": "List Creatives",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 200', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test('Response has creatives array', function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('creatives');",
                                    "    pm.expect(jsonData.creatives).to.be.an('array');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/v1/ad-generation/creatives?page=1&limit=10",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "v1",
                                "ad-generation",
                                "creatives"
                            ],
                            "query": [
                                {
                                    "key": "page",
                                    "value": "1"
                                },
                                {
                                    "key": "limit",
                                    "value": "10"
                                }
                            ]
                        }
                    }
                },
                {
                    "name": "Create Creative with AI",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 201', function () {",
                                    "    pm.response.to.have.status(201);",
                                    "});",
                                    "",
                                    "pm.test('Creative created successfully', function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('creative');",
                                    "    pm.expect(jsonData.creative).to.have.property('id');",
                                    "    ",
                                    "    // Store creative ID for future requests",
                                    "    pm.environment.set('creativeId', jsonData.creative.id);",
                                    "});",
                                    "",
                                    "pm.test('Creative has AI-generated content', function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    const creative = jsonData.creative;",
                                    "    ",
                                    "    pm.expect(creative).to.have.property('content');",
                                    "    pm.expect(creative).to.have.property('status');",
                                    "    pm.expect(creative.status).to.eql('generated');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"campaign_id\": \"{{campaignId}}\",\n  \"name\": \"Test Creative {{$timestamp}}\",\n  \"type\": \"text\",\n  \"prompt\": \"Create an engaging ad copy for a technology business campaign targeting professionals\",\n  \"ai_settings\": {\n    \"max_tokens\": 150,\n    \"temperature\": 0.7,\n    \"style\": \"professional\"\n  }\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/v1/ad-generation/creatives",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "v1",
                                "ad-generation",
                                "creatives"
                            ]
                        }
                    }
                },
                {
                    "name": "Get Creative by ID",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 200', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test('Creative retrieved successfully', function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('creative');",
                                    "    pm.expect(jsonData.creative.id).to.eql(pm.environment.get('creativeId'));",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/v1/ad-generation/creatives/{{creativeId}}",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "v1",
                                "ad-generation",
                                "creatives",
                                "{{creativeId}}"
                            ]
                        }
                    }
                }
            ]
        },
        {
            "name": "Analytics",
            "item": [
                {
                    "name": "Get Campaign Analytics",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 200', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test('Analytics data present', function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('analytics');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/v1/analytics/campaigns/{{campaignId}}?start_date=2025-08-01&end_date=2025-08-02&period=daily",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "v1",
                                "analytics",
                                "campaigns",
                                "{{campaignId}}"
                            ],
                            "query": [
                                {
                                    "key": "start_date",
                                    "value": "2025-08-01"
                                },
                                {
                                    "key": "end_date",
                                    "value": "2025-08-02"
                                },
                                {
                                    "key": "period",
                                    "value": "daily"
                                }
                            ]
                        }
                    }
                },
                {
                    "name": "Get Multi-Campaign Analytics",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 200', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test('Batch analytics data present', function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('analytics');",
                                    "    pm.expect(jsonData).to.have.property('summary');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"campaign_ids\": [\"{{campaignId}}\"],\n  \"start_date\": \"2025-08-01\",\n  \"end_date\": \"2025-08-02\",\n  \"period\": \"daily\",\n  \"metrics\": [\"impressions\", \"clicks\", \"conversions\", \"spend\"],\n  \"group_by\": [\"campaign\", \"date\"]\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/v1/analytics/campaigns/batch",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "v1",
                                "analytics",
                                "campaigns",
                                "batch"
                            ]
                        }
                    }
                },
                {
                    "name": "Get Top Performing Creatives",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 200', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test('Top creatives data present', function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('top_creatives');",
                                    "    pm.expect(jsonData.top_creatives).to.be.an('array');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/v1/analytics/top-creatives?limit=5",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "v1",
                                "analytics",
                                "top-creatives"
                            ],
                            "query": [
                                {
                                    "key": "limit",
                                    "value": "5"
                                }
                            ]
                        }
                    }
                },
                {
                    "name": "Get Performance Summary",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 200', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test('Performance summary present', function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('overview');",
                                    "    pm.expect(jsonData.overview).to.have.property('total_impressions');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/v1/analytics/summary",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "v1",
                                "analytics",
                                "summary"
                            ]
                        }
                    }
                }
            ]
        },
        {
            "name": "Billing & Subscriptions",
            "item": [
                {
                    "name": "Get Current Subscription",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 200 or 404', function () {",
                                    "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                                    "});",
                                    "",
                                    "if (pm.response.code === 200) {",
                                    "    pm.test('Subscription data present', function () {",
                                    "        const jsonData = pm.response.json();",
                                    "        pm.expect(jsonData).to.have.property('subscription');",
                                    "        pm.expect(jsonData.subscription).to.have.property('plan');",
                                    "    });",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/v1/billing/subscription",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "v1",
                                "billing",
                                "subscription"
                            ]
                        }
                    }
                },
                {
                    "name": "Update Subscription Plan",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 200', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test('Subscription updated successfully', function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('subscription');",
                                    "    pm.expect(jsonData).to.have.property('message');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "PUT",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"plan_id\": \"pro\"\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/v1/billing/subscription",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "v1",
                                "billing",
                                "subscription"
                            ]
                        }
                    }
                },
                {
                    "name": "Get Usage Statistics",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 200', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test('Usage data present', function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('usage');",
                                    "    pm.expect(jsonData).to.have.property('time_range');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/v1/billing/usage?start_date=2025-08-01&end_date=2025-08-02",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "v1",
                                "billing",
                                "usage"
                            ],
                            "query": [
                                {
                                    "key": "start_date",
                                    "value": "2025-08-01"
                                },
                                {
                                    "key": "end_date",
                                    "value": "2025-08-02"
                                }
                            ]
                        }
                    }
                },
                {
                    "name": "Get Invoice History",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 200', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test('Invoice data present', function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('invoices');",
                                    "    pm.expect(jsonData).to.have.property('pagination');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/v1/billing/invoices?page=1&limit=10",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "v1",
                                "billing",
                                "invoices"
                            ],
                            "query": [
                                {
                                    "key": "page",
                                    "value": "1"
                                },
                                {
                                    "key": "limit",
                                    "value": "10"
                                }
                            ]
                        }
                    }
                },
                {
                    "name": "Get Plan Limits",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 200', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test('Plan limits data present', function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('plan');",
                                    "    pm.expect(jsonData).to.have.property('limits');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/v1/billing/plan-limits",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "v1",
                                "billing",
                                "plan-limits"
                            ]
                        }
                    }
                },
                {
                    "name": "Process Payment",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 200', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test('Payment processed successfully', function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('payment');",
                                    "    pm.expect(jsonData).to.have.property('message');",
                                    "    pm.expect(jsonData.payment.status).to.eql('completed');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"invoice_id\": \"64f5a1b2c3d4e5f6a7b8c9d5\",\n  \"payment_method\": \"credit_card\",\n  \"amount\": 99.00,\n  \"currency\": \"USD\",\n  \"metadata\": {\n    \"card_last_four\": \"4242\",\n    \"payment_processor\": \"test\"\n  }\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/v1/billing/payment",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "v1",
                                "billing",
                                "payment"
                            ]
                        }
                    }
                }
            ]
        },
        {
            "name": "End-to-End Test Flow",
            "item": [
                {
                    "name": "1. Health Check",
                    "request": {
                        "auth": {
                            "type": "noauth"
                        },
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/health",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "health"
                            ]
                        }
                    }
                },
                {
                    "name": "2. Create Test Campaign",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "if (pm.response.code === 201) {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.environment.set('e2e_campaignId', jsonData.campaign.id);",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"name\": \"E2E Test Campaign {{$timestamp}}\",\n  \"description\": \"End-to-end test campaign\",\n  \"budget\": 1000.00,\n  \"start_date\": \"2025-08-01T00:00:00Z\",\n  \"end_date\": \"2025-08-31T23:59:59Z\",\n  \"target_audience\": {\n    \"age_range\": \"25-45\",\n    \"interests\": [\"technology\"],\n    \"demographics\": \"professionals\"\n  }\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/v1/ad-generation/campaigns",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "v1",
                                "ad-generation",
                                "campaigns"
                            ]
                        }
                    }
                },
                {
                    "name": "3. Create Test Creative",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "if (pm.response.code === 201) {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.environment.set('e2e_creativeId', jsonData.creative.id);",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"campaign_id\": \"{{e2e_campaignId}}\",\n  \"name\": \"E2E Test Creative\",\n  \"type\": \"text\",\n  \"prompt\": \"Create a professional ad copy for technology services\",\n  \"ai_settings\": {\n    \"max_tokens\": 100,\n    \"temperature\": 0.7\n  }\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/v1/ad-generation/creatives",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "v1",
                                "ad-generation",
                                "creatives"
                            ]
                        }
                    }
                },
                {
                    "name": "4. Get Campaign Analytics",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/v1/analytics/campaigns/{{e2e_campaignId}}",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "v1",
                                "analytics",
                                "campaigns",
                                "{{e2e_campaignId}}"
                            ]
                        }
                    }
                },
                {
                    "name": "5. Check Subscription",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/v1/billing/subscription",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "v1",
                                "billing",
                                "subscription"
                            ]
                        }
                    }
                },
                {
                    "name": "6. Get Usage Statistics",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/v1/billing/usage",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "v1",
                                "billing",
                                "usage"
                            ]
                        }
                    }
                },
                {
                    "name": "7. Cleanup - Delete Test Campaign",
                    "request": {
                        "method": "DELETE",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/v1/ad-generation/campaigns/{{e2e_campaignId}}",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "v1",
                                "ad-generation",
                                "campaigns",
                                "{{e2e_campaignId}}"
                            ]
                        }
                    }
                }
            ]
        }
    ]
}