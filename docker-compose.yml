version: "3.8"

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: adgenius_mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: adgenius_public
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - adgenius_network

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    container_name: adgenius_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - adgenius_network

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: adgenius_rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: password123
    ports:
      - "5672:5672" # AMQP port
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - adgenius_network

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: adgenius_qdrant
    restart: unless-stopped
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - adgenius_network

  # Django Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: adgenius_backend
    restart: unless-stopped
    environment:
      DEBUG: "True"
      SECRET_KEY: "your-secret-key-here-change-in-production"
      ALLOWED_HOSTS: "localhost,127.0.0.1,0.0.0.0,backend"

      # Database
      MONGO_HOST: mongodb
      MONGO_PORT: 27017
      MONGO_DB_NAME: adgenius_public
      MONGO_USERNAME: admin
      MONGO_PASSWORD: password123
      MONGO_AUTH_SOURCE: admin

      # Cache
      REDIS_URL: redis://redis:6379/0

      # Message Queue
      CELERY_BROKER_URL: amqp://admin:password123@rabbitmq:5672//

      # Vector Database
      QDRANT_HOST: qdrant
      QDRANT_PORT: 6333

      # Google Cloud (configure your own)
      GOOGLE_CLOUD_PROJECT: ""
      GOOGLE_APPLICATION_CREDENTIALS: ""
      VERTEX_AI_LOCATION: "us-central1"

      # Frontend URL
      FRONTEND_URL: "http://localhost:3000"
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - backend_static:/app/staticfiles
      - backend_media:/app/media
    depends_on:
      - mongodb
      - redis
      - rabbitmq
      - qdrant
    networks:
      - adgenius_network

  # Celery Worker
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: adgenius_celery_worker
    restart: unless-stopped
    command: celery -A config worker --loglevel=info --concurrency=2
    environment:
      DEBUG: "True"
      SECRET_KEY: "your-secret-key-here-change-in-production"

      # Database
      MONGO_HOST: mongodb
      MONGO_PORT: 27017
      MONGO_DB_NAME: adgenius_public
      MONGO_USERNAME: admin
      MONGO_PASSWORD: password123
      MONGO_AUTH_SOURCE: admin

      # Cache
      REDIS_URL: redis://redis:6379/0

      # Message Queue
      CELERY_BROKER_URL: amqp://admin:password123@rabbitmq:5672//

      # Vector Database
      QDRANT_HOST: qdrant
      QDRANT_PORT: 6333

      # Google Cloud (configure your own)
      GOOGLE_CLOUD_PROJECT: ""
      GOOGLE_APPLICATION_CREDENTIALS: ""
      VERTEX_AI_LOCATION: "us-central1"
    volumes:
      - ./backend:/app
    depends_on:
      - mongodb
      - redis
      - rabbitmq
      - backend
    networks:
      - adgenius_network

  # Celery Beat (Scheduler)
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: adgenius_celery_beat
    restart: unless-stopped
    command: celery -A config beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    environment:
      DEBUG: "True"
      SECRET_KEY: "your-secret-key-here-change-in-production"

      # Database
      MONGO_HOST: mongodb
      MONGO_PORT: 27017
      MONGO_DB_NAME: adgenius_public
      MONGO_USERNAME: admin
      MONGO_PASSWORD: password123
      MONGO_AUTH_SOURCE: admin

      # Cache
      REDIS_URL: redis://redis:6379/0

      # Message Queue
      CELERY_BROKER_URL: amqp://admin:password123@rabbitmq:5672//
    volumes:
      - ./backend:/app
    depends_on:
      - mongodb
      - redis
      - rabbitmq
      - backend
    networks:
      - adgenius_network

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: adgenius_frontend
    restart: unless-stopped
    environment:
      NEXT_PUBLIC_API_URL: "http://localhost:8000/api/v1"
      NEXT_PUBLIC_APP_URL: "http://localhost:3000"
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    networks:
      - adgenius_network

  # Nginx (Production Load Balancer/Reverse Proxy)
  nginx:
    image: nginx:1.25-alpine
    container_name: adgenius_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - backend_static:/var/www/static:ro
      - backend_media:/var/www/media:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend
    networks:
      - adgenius_network
    profiles:
      - production

# Named volumes for data persistence
volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  qdrant_data:
    driver: local
  backend_static:
    driver: local
  backend_media:
    driver: local

# Custom network
networks:
  adgenius_network:
    driver: bridge
