# Default values for ceaser-ad-business.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Global configuration
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""

# Image pull policy
image:
  pullPolicy: IfNotPresent

# Service account
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  name: ""

# Security context
podSecurityContext:
  fsGroup: 2000

securityContext:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: false
  runAsNonRoot: true
  runAsUser: 1000

# Ingress configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
  - host: adgenius.example.com
    paths:
    - path: /
      pathType: Prefix
      service:
        name: frontend
        port: 80
    - path: /api
      pathType: Prefix
      service:
        name: go-api-gateway
        port: 8080
  tls:
  - secretName: adgenius-tls
    hosts:
    - adgenius.example.com

# Resource limits and requests
resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 250m
    memory: 256Mi

# Node selector
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity
affinity: {}

# Horizontal Pod Autoscaler
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

# Frontend service configuration
frontend:
  enabled: true
  replicaCount: 2
  image:
    repository: ceaser-ad-business/frontend
    tag: "latest"
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 80
    targetPort: 80
  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi
  env:
  - name: NODE_ENV
    value: "production"
  - name: VITE_API_BASE_URL
    value: "/api"
  configMap:
    nginx:
      conf: |
        server {
            listen 80;
            server_name _;
            root /usr/share/nginx/html;
            index index.html index.htm;
            
            # Gzip compression
            gzip on;
            gzip_vary on;
            gzip_min_length 1024;
            gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;
            
            # Security headers
            add_header X-Frame-Options "SAMEORIGIN" always;
            add_header X-XSS-Protection "1; mode=block" always;
            add_header X-Content-Type-Options "nosniff" always;
            add_header Referrer-Policy "no-referrer-when-downgrade" always;
            add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
            
            # API proxy
            location /api/ {
                proxy_pass http://go-api-gateway:8080/;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }
            
            # Frontend routes
            location / {
                try_files $uri $uri/ /index.html;
            }
        }

# Go API Gateway configuration
goApiGateway:
  enabled: true
  replicaCount: 2
  image:
    repository: ceaser-ad-business/go-api-gateway
    tag: "latest"
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 8080
    targetPort: 8080
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi
  env:
  - name: GIN_MODE
    value: "release"
  - name: PORT
    value: "8080"
  - name: LOG_LEVEL
    value: "info"
  - name: AI_ENGINE_ADDRESS
    value: "python-ai-engine:50051"
  - name: AI_ENGINE_TIMEOUT
    value: "30s"

# Python AI Engine configuration
pythonAiEngine:
  enabled: true
  replicaCount: 2
  image:
    repository: ceaser-ad-business/python-ai-engine
    tag: "latest"
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 50051
    targetPort: 50051
  resources:
    limits:
      cpu: 1000m
      memory: 2Gi
    requests:
      cpu: 500m
      memory: 1Gi
  env:
  - name: GRPC_PORT
    value: "50051"
  - name: GRPC_MAX_WORKERS
    value: "10"
  - name: LOG_LEVEL
    value: "INFO"
  - name: STRUCTURED_LOGGING
    value: "true"
  - name: PYTHONUNBUFFERED
    value: "1"

# Qdrant Vector Database configuration (using official Qdrant chart)
qdrant:
  enabled: true
  fullnameOverride: "ceaser-ad-business-qdrant"
  image:
    tag: "v1.15.2"
  service:
    type: ClusterIP
    httpPort: 6333
    grpcPort: 6334
  persistence:
    enabled: true
    size: 10Gi
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 250m
      memory: 512Mi
  config:
    cluster:
      enabled: false

# Redis configuration (using Bitnami chart)
redis:
  enabled: true
  auth:
    enabled: true
    password: "changeme"
  master:
    persistence:
      enabled: true
      size: 8Gi
  replica:
    replicaCount: 1
    persistence:
      enabled: true
      size: 8Gi

# Secret configuration
secrets:
  # Firebase configuration
  firebase:
    projectId: ""
    databaseId: ""
    storageBucket: ""
    serviceAccountKey: ""

  # API Keys
  apiKeys:
    openai: ""
    google: ""
    runway: ""
    pika: ""
    stability: ""
    luma: ""

# ConfigMap configuration
config:
  # Application configuration
  app:
    environment: "production"
    logLevel: "info"
    debug: false

  # Feature flags
  features:
    videoGeneration: true
    aiAnalysis: true
    multiTenant: true

# Health check configuration
healthCheck:
  enabled: true
  path: "/health"
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

# Monitoring and observability
monitoring:
  enabled: false
  serviceMonitor:
    enabled: false
    namespace: monitoring
    interval: 30s
    path: /metrics

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Network Policies
networkPolicy:
  enabled: false
  ingress: []
  egress: []
